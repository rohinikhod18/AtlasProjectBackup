Setup for customcheck service :

* Software specifications :
   1) Jdk 1.8
   2) wildfly-10.0.0
   3) gradle 2.3 
   4) sqlserver 2008

step 1 : For build project run using gradle "--refresh-dependencies build" command in sts IDE

step 2 : Use database "Enter-test", Configure in wildfly's standalone.xml like below 
 			<datasource jta="true" jndi-name="java:jboss/datasources/EnterpriseDS" pool-name="es.pool" enabled="true" use-java-context="true" use-ccm="false">
                    <connection-url>jdbc:sqlserver://172.31.2.37:1433;DatabaseName=Enter_Test;autoReconnect=true;autoReconnectForPools=true</connection-url>
                    <driver>sqlserver2008</driver>
                    <security>
                        <user-name>sa</user-name>
                        <password>bnt@12</password>
                    </security>
                    <statement>
                        <prepared-statement-cache-size>0</prepared-statement-cache-size>
                        <share-prepared-statements>false</share-prepared-statements>
                    </statement>
                </datasource>
              
step 3 : Run " customcheck_db.sql" and "customcheck_seed.sql" file in "Enter_test" database
                
step 4 : Merge eap modules to wildfly server from below url : 
         "http://83.244.243.134/repos/Compliance/trunk/Development/eap-modules"
         
step 5 : To deploy customcheck-service, copy war file from "build/libs/customcheck-service.war" to
         "wildfly-10.0.0.Final/standalone/deployments" 
         
=====================================================================================
Setup for blacklist service :

* Software specifications :
   1) Jdk 1.8
   2) wildfly-10.0.0
   3) gradle 2.3 
   4) sqlserver 2008

step 1 : For build project run using gradle "--refresh-dependencies build" command in sts IDE

step 2 : Use database "Enter-test", Configure in wildfly's standalone.xml like below 
 			<datasource jta="true" jndi-name="java:jboss/datasources/EnterpriseDS" pool-name="es.pool" enabled="true" use-java-context="true" use-ccm="false">
                    <connection-url>jdbc:sqlserver://172.31.2.37:1433;DatabaseName=Enter_Test;autoReconnect=true;autoReconnectForPools=true</connection-url>
                    <driver>sqlserver2008</driver>
                    <security>
                        <user-name>sa</user-name>
                        <password>bnt@12</password>
                    </security>
                    <statement>
                        <prepared-statement-cache-size>0</prepared-statement-cache-size>
                        <share-prepared-statements>false</share-prepared-statements>
                    </statement>
                </datasource>
                
step 3 : Run blacklist_db.sql file in "Enter_test" database
                
step 4 : Merge eap modules to wildfly server from below url : 
         "http://83.244.243.134/repos/Compliance/trunk/Development/eap-modules
         
step 5 : To deploy blacklist-service, copy war file from build/libs/blacklist-service-0.1.war to
         wildfly-10.0.0.Final/standalone/deployments 
         
 ===============================================================================
 Setup for kyc service :

* Software specifications :
   1) Jdk 1.8
   2) wildfly-10.0.0
   3) gradle 2.3 
   4) sqlserver 2008

step 1 : For build project run using gradle "--refresh-dependencies build" command in sts IDE

step 2 : Use database "Enter-test", Configure in wildfly's standalone.xml like below 
 			<datasource jta="true" jndi-name="java:jboss/datasources/EnterpriseDS" pool-name="es.pool" enabled="true" use-java-context="true" use-ccm="false">
                    <connection-url>jdbc:sqlserver://172.31.2.37:1433;DatabaseName=Enter_Test;autoReconnect=true;autoReconnectForPools=true</connection-url>
                    <driver>sqlserver2008</driver>
                    <security>
                        <user-name>sa</user-name>
                        <password>bnt@12</password>
                    </security>
                    <statement>
                        <prepared-statement-cache-size>0</prepared-statement-cache-size>
                        <share-prepared-statements>false</share-prepared-statements>
                    </statement>
                </datasource>
                
step 3 : Run kyc_db.sql and kyc_seed.sql file in "Enter_test" database
                
step 4 : Merge eap modules to wildfly server from below url : 
         "http://83.244.243.134/repos/Compliance/trunk/Development/eap-modules
         
step 5 : To deploy kyc-service, copy war file from build/libs/kyc-service-0.1.war to
         wildfly-10.0.0.Final/standalone/deployments 
         
================================================================================
 
 Setup for customerdatascan service :

* Software specifications :
   1) Jdk 1.8
   2) wildfly-10.0.0
   3) gradle 2.3
   4) elasticsearch 2.3.3  

step 1 : For build project run using gradle "--refresh-dependencies build" command in sts IDE

                
step 2 : Merge eap modules to wildfly server from below url : 
         "http://83.244.243.134/repos/Compliance/trunk/Development/eap-modules
         
step 3 : To deploy customerdatascan-service, copy war file from build/libs/customerdatascan-service-0.1.war to
         wildfly-10.0.0.Final/standalone/deployments 

step 4 : Add elasticsearch.ip and elasticsearch.port property in wildfly-10.0.0.Final/standalone/configuration/compliance-conf/compliance.properties     
		 eg. elasticsearch.ip=172.31.2.6
		 	 elasticsearch.port=9200
		 	 
step 5 : To configure elasticsearch refer elasticSetup below	    

==================================================================================
Setup for ElasticSearch Instance :

step 1 : Download elasticsearch 2.3.3 from following url
			https://www.elastic.co/downloads/past-releases/elasticsearch-2-3-3

step 2 :  Add following properties in elasticsearch.yml
				cluster.name: compliance
				network.host: _non_loopback:ipv4_
				script.inline: on  
				script.indexed: on 
				script.engine.groovy.inline.aggs: on
				script.engine.groovy.inline.search: on
                
step 2 : create index
			eg.
			curl -XPUT 'localhost:9200/customer/1
			{
			  "orgCode": "cd",
			  "sfAccountID": "1",
			  "auroraAccountID": "2",
			  "name": {
			    "title": "Mr",
			    "preferedName": "luis",
			    "foreName": "luis",
			    "middleName": "",
			    "surName": "sammual",
			    "secondSurname": ""
			  },
			  "address": "pune maharashtra",
			  "nationality": "indian",
			  "countryOfResidence": "india",
			  "placeOfBirth": "india",
			  "familyNameAtBirth": "sammual",
			  "familyNameAtCitizenship": "sammual",
			  "gender": "M",
			  "dobDay": "1",
			  "dobMonth": "1",
			  "dobYear": "1990",
			  "phone": "1234",
			  "fax": "1234",
			  "email": "luis.sammual@gmail.com",
			  "ipAddress": "172.31.4.5",
			  "digitalFootPrint": {
			    "deviceId": "1111"
			  },
			  "isDeleted": "false",
			  "createdOn": "2016-07-01 12:27:54.906",
			  "createdBy": "1",
			  "updateOn": "2016-07-01 12:27:54.906",
			  "updatedBy": "1"
			}
============================================================================
Setup for quartz scheduler :
add datasource in jboss standalone.xml like below(please change database url and database name accordingly) :


<datasource jta="true" jndi-name="java:jboss/datasources/QuartzDS" pool-name="quartz.pool" enabled="true" use-java-context="true" use-ccm="false">
                    <connection-url>jdbc:sqlserver://172.31.2.37:1433;DatabaseName=compliance_quartz;autoReconnect=true;autoReconnectForPools=true;SelectMethod=cursor</connection-url>
                    <driver>sqlserver2008</driver>
                    <security>
                        <user-name>sa</user-name>
                        <password>bnt@12</password>
                    </security>
                    <statement>
                        <prepared-statement-cache-size>0</prepared-statement-cache-size>
                        <share-prepared-statements>false</share-prepared-statements>
                    </statement>
                </datasource>