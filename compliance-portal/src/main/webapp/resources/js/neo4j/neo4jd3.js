/*
*****  MIT License ********

Copyright (c) 2016 Eduardo Eisman

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Neo4jd3 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';
var neo4jd3 = _dereq_('./scripts/neo4jd3');
module.exports = neo4jd3;
},{"./scripts/neo4jd3":2}],2:[function(_dereq_,module,exports){
/* global d3, document // jshint latedef:nofunc */
'use strict';

function Neo4jD3(_selector, _options) {
    var container, graph, info, node, nodes, relationship, relationshipOutline, relationshipOverlay, relationshipText, relationships, selector, simulation, svg, svgNodes, svgRelationships, svgScale, svgTranslate,
        classes2colors = {},
        justLoaded = false,
        numClasses = 0,
        options = {
            arrowSize: 4,
            colors: colors(),
            highlight: undefined,
            iconMap: undefined,/*fontAwesomeIcons(),*/
            icons: undefined,
            imageMap: {},
            images: undefined,
            infoPanel: true,
            minCollision: undefined,
            neo4jData: undefined,
            neo4jDataUrl: undefined,
            nodeOutlineFillColor: undefined,
            nodeRadius: 25,
            relationshipColor: '#a5abb6',
            zoomFit: false
        },
        VERSION = '0.0.1';
    
    var nodeLabels = ["SF ContactID","Client Number","SF AccountID","Org. Code","Status","Reason"];

    function appendGraph(container) {
        svg = container.append('svg').attr('width', '100%').attr('height', '100%').attr('class', 'neo4jd3-graph')
                       .call(d3.zoom().on('zoom', function() {
                           var scale = d3.event.transform.k,
                               translate = [d3.event.transform.x, d3.event.transform.y];
                           if (svgTranslate) {
                               translate[0] += svgTranslate[0];
                               translate[1] += svgTranslate[1];
                           }
                           if (svgScale) { scale *= svgScale; }
                           svg.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')');
                       }))
                       .on('dblclick.zoom', null).append('g').attr('width', '100%').attr('height', '100%');
        svgRelationships = svg.append('g').attr('class', 'relationships');
        svgNodes = svg.append('g').attr('class', 'nodes');
    }

    function appendImageToNode(node) {
    	return node.append('svg').attr('id','escsvg').attr('version','1.1').attr('width','24').attr('height','24')
		.attr('viewBox','0 20 200 816').attr('xmlns','http://www.w3.org/2000/svg').attr('xmlns:xlink','http://www.w3.org/1999/xlink')
    	.html(function(d) {
    		if(d.labels[0] === 'FRAUD')
    			return '<g id="svgg"><path id="path0" d="M112.828 39.031 C 112.885 40.293,113.080 43.929,113.260 47.109 C 113.440 50.289,113.673 55.264,113.778 58.163 C 113.883 61.063,114.121 66.497,114.305 70.238 C 114.700 78.221,115.512 102.180,115.977 119.558 C 116.158 126.293,116.468 137.389,116.667 144.218 C 116.865 151.046,117.173 163.520,117.351 171.939 C 118.343 218.867,119.525 260.813,120.563 285.884 C 121.237 302.174,122.045 319.335,122.277 322.279 C 122.380 323.588,122.691 328.639,122.969 333.503 C 123.628 345.053,125.274 368.627,125.676 372.279 C 125.779 373.214,126.093 376.735,126.374 380.102 C 127.797 397.183,129.536 413.891,131.790 432.143 C 132.252 435.884,132.786 440.247,132.976 441.837 C 133.166 443.427,133.481 445.799,133.677 447.109 C 133.873 448.418,134.642 453.852,135.386 459.184 C 136.130 464.515,136.967 470.255,137.244 471.939 C 137.522 473.622,138.288 478.367,138.946 482.483 C 139.604 486.599,140.360 491.190,140.625 492.687 C 140.891 494.184,141.350 496.786,141.646 498.469 C 142.510 503.376,143.869 510.890,144.036 511.684 C 144.121 512.086,144.814 515.706,145.576 519.728 C 146.338 523.750,147.126 527.681,147.328 528.463 L 147.695 529.886 149.783 530.070 C 150.931 530.171,174.148 530.350,201.377 530.468 L 250.883 530.682 252.862 520.698 C 253.950 515.207,255.137 509.107,255.500 507.143 C 255.862 505.179,256.372 502.423,256.633 501.020 C 259.771 484.151,262.382 468.195,264.927 450.340 C 265.500 446.318,266.124 441.956,266.315 440.646 C 266.971 436.130,267.669 430.760,268.525 423.639 C 268.997 419.711,269.538 415.349,269.726 413.946 C 270.082 411.286,270.327 409.108,271.449 398.639 C 273.072 383.483,273.592 378.162,274.837 363.946 C 276.226 348.080,277.231 334.877,278.046 321.769 C 278.319 317.372,278.628 312.781,278.731 311.565 C 280.096 295.493,282.903 229.170,284.842 167.177 C 285.117 158.384,285.432 149.277,285.542 146.939 C 285.651 144.600,285.967 136.182,286.244 128.231 C 286.989 106.816,288.562 68.896,288.940 63.265 C 289.046 61.675,289.357 55.935,289.630 50.510 C 289.903 45.085,290.225 39.766,290.345 38.690 L 290.564 36.735 201.643 36.735 L 112.723 36.735 112.828 39.031 M281.290 46.684 C 281.288 46.918,281.054 51.701,280.770 57.313 C 279.914 74.187,279.295 88.008,278.568 106.463 C 277.602 131.008,277.030 147.333,275.363 197.959 C 275.082 206.471,274.693 217.415,274.497 222.279 C 274.302 227.143,273.983 235.102,273.789 239.966 C 272.996 259.877,271.603 289.980,271.262 294.558 C 271.157 295.961,270.846 301.012,270.569 305.782 C 269.852 318.169,268.187 342.711,267.857 345.748 C 267.756 346.684,267.449 350.281,267.174 353.741 C 265.325 377.068,262.895 400.416,259.528 427.211 C 258.959 431.736,256.832 447.225,256.468 449.490 C 256.287 450.612,255.975 452.679,255.773 454.082 C 255.360 456.957,254.290 463.942,253.558 468.537 C 253.289 470.221,252.851 472.976,252.583 474.660 C 250.804 485.850,246.869 507.385,244.786 517.333 L 244.041 520.890 218.704 520.771 C 204.769 520.705,184.643 520.558,173.980 520.444 L 154.592 520.238 154.179 518.537 C 149.778 500.403,140.604 437.744,136.749 399.490 C 134.994 382.072,132.633 353.184,132.648 349.320 C 132.676 342.218,132.638 341.348,132.317 341.837 C 132.059 342.231,131.982 342.115,131.977 341.327 C 131.974 340.765,131.661 336.097,131.283 330.952 C 124.882 244.026,123.157 193.460,122.705 79.507 L 122.619 57.824 124.235 57.610 L 125.850 57.395 125.850 51.998 L 125.850 46.601 167.432 46.514 C 190.302 46.465,225.276 46.388,245.153 46.342 C 273.884 46.276,281.292 46.346,281.290 46.684 M144.819 59.770 C 145.430 59.846,146.349 59.844,146.860 59.767 C 147.371 59.689,146.871 59.627,145.748 59.629 C 144.626 59.631,144.208 59.695,144.819 59.770 M173.554 59.767 C 174.069 59.845,174.911 59.845,175.425 59.767 C 175.940 59.689,175.519 59.626,174.490 59.626 C 173.461 59.626,173.040 59.689,173.554 59.767 M136.310 60.110 C 136.918 60.185,137.912 60.185,138.520 60.110 C 139.128 60.035,138.631 59.973,137.415 59.973 C 136.199 59.973,135.702 60.035,136.310 60.110 M182.058 60.108 C 182.572 60.186,183.414 60.186,183.929 60.108 C 184.443 60.030,184.022 59.966,182.993 59.966 C 181.964 59.966,181.543 60.030,182.058 60.108 M130.362 60.448 C 130.879 60.526,131.644 60.524,132.062 60.444 C 132.481 60.363,132.058 60.299,131.122 60.301 C 130.187 60.304,129.845 60.370,130.362 60.448 M259.524 67.687 C 258.368 67.930,258.381 67.939,259.969 67.982 C 260.983 68.010,261.525 67.898,261.395 67.687 C 261.279 67.500,261.079 67.367,260.949 67.392 C 260.820 67.416,260.179 67.549,259.524 67.687 M247.186 68.273 C 247.790 68.348,248.862 68.349,249.567 68.275 C 250.273 68.202,249.779 68.140,248.469 68.139 C 247.160 68.137,246.582 68.198,247.186 68.273 M232.403 68.611 C 232.920 68.690,233.685 68.688,234.103 68.607 C 234.522 68.526,234.099 68.462,233.163 68.465 C 232.228 68.467,231.886 68.533,232.403 68.611 M210.969 68.955 C 211.671 69.029,212.819 69.029,213.520 68.955 C 214.222 68.882,213.648 68.822,212.245 68.822 C 210.842 68.822,210.268 68.882,210.969 68.955 M189.555 69.300 C 190.825 69.366,192.815 69.365,193.977 69.299 C 195.138 69.233,194.099 69.179,191.667 69.180 C 189.235 69.180,188.284 69.235,189.555 69.300 M172.016 69.633 C 172.620 69.708,173.691 69.710,174.397 69.636 C 175.103 69.562,174.609 69.501,173.299 69.499 C 171.990 69.498,171.412 69.558,172.016 69.633 M155.350 69.973 C 155.953 70.049,157.025 70.050,157.731 69.976 C 158.436 69.902,157.942 69.841,156.633 69.840 C 155.323 69.838,154.746 69.898,155.350 69.973 M143.622 70.318 C 144.511 70.388,145.965 70.388,146.854 70.318 C 147.742 70.248,147.015 70.191,145.238 70.191 C 143.461 70.191,142.734 70.248,143.622 70.318 M134.103 70.652 C 134.620 70.730,135.386 70.728,135.804 70.648 C 136.222 70.567,135.799 70.503,134.864 70.505 C 133.929 70.508,133.586 70.574,134.103 70.652 M133.099 78.061 C 133.101 79.184,133.164 79.602,133.240 78.991 C 133.315 78.379,133.314 77.461,133.236 76.950 C 133.159 76.439,133.097 76.939,133.099 78.061 M132.772 87.415 C 132.772 89.005,132.831 89.656,132.902 88.861 C 132.974 88.065,132.974 86.764,132.902 85.969 C 132.831 85.174,132.772 85.825,132.772 87.415 M132.410 95.748 C 132.413 96.684,132.479 97.026,132.557 96.509 C 132.635 95.992,132.633 95.227,132.552 94.808 C 132.472 94.390,132.408 94.813,132.410 95.748 M132.078 105.952 C 132.080 107.075,132.144 107.493,132.219 106.882 C 132.295 106.270,132.293 105.352,132.216 104.841 C 132.138 104.330,132.076 104.830,132.078 105.952 M131.753 116.156 C 131.752 117.840,131.810 118.572,131.881 117.782 C 131.953 116.993,131.953 115.615,131.883 114.721 C 131.813 113.827,131.754 114.473,131.753 116.156 M131.413 126.701 C 131.412 128.384,131.470 129.116,131.541 128.327 C 131.612 127.537,131.613 126.160,131.543 125.265 C 131.473 124.371,131.414 125.017,131.413 126.701 M131.054 138.095 C 131.054 139.124,131.118 139.545,131.196 139.031 C 131.274 138.516,131.274 137.674,131.196 137.160 C 131.118 136.645,131.054 137.066,131.054 138.095 M130.736 151.871 C 130.737 153.741,130.794 154.463,130.863 153.475 C 130.932 152.487,130.932 150.956,130.862 150.074 C 130.792 149.191,130.736 150.000,130.736 151.871 M130.410 166.837 C 130.410 169.830,130.462 171.009,130.525 169.457 C 130.589 167.904,130.588 165.455,130.525 164.014 C 130.461 162.574,130.409 163.844,130.410 166.837 M130.056 183.163 C 130.057 185.034,130.114 185.756,130.183 184.768 C 130.252 183.779,130.251 182.248,130.182 181.366 C 130.112 180.484,130.055 181.293,130.056 183.163 M129.747 224.830 C 129.747 232.594,129.792 235.770,129.847 231.888 C 129.901 228.006,129.901 221.654,129.847 217.772 C 129.792 213.890,129.747 217.066,129.747 224.830 M130.053 265.476 C 130.052 267.160,130.109 267.892,130.181 267.102 C 130.252 266.313,130.253 264.935,130.182 264.041 C 130.112 263.147,130.054 263.793,130.053 265.476 M130.407 280.272 C 130.407 282.985,130.460 284.094,130.525 282.738 C 130.589 281.382,130.589 279.162,130.525 277.806 C 130.460 276.450,130.407 277.560,130.407 280.272 M130.733 293.707 C 130.732 295.391,130.789 296.123,130.861 295.333 C 130.932 294.544,130.933 293.166,130.863 292.272 C 130.792 291.378,130.734 292.024,130.733 293.707 M131.054 305.442 C 131.054 306.471,131.118 306.892,131.196 306.378 C 131.274 305.863,131.274 305.021,131.196 304.507 C 131.118 303.992,131.054 304.413,131.054 305.442 M131.411 315.646 C 131.411 317.236,131.470 317.887,131.542 317.092 C 131.613 316.297,131.613 314.996,131.542 314.201 C 131.470 313.406,131.411 314.056,131.411 315.646 M131.749 324.660 C 131.750 326.156,131.810 326.726,131.882 325.926 C 131.954 325.126,131.953 323.902,131.880 323.205 C 131.807 322.509,131.748 323.163,131.749 324.660 M132.070 333.844 C 132.073 334.779,132.139 335.121,132.217 334.604 C 132.295 334.087,132.293 333.322,132.212 332.903 C 132.131 332.485,132.068 332.908,132.070 333.844 M193.124 597.870 C 194.112 597.939,195.643 597.938,196.525 597.869 C 197.407 597.799,196.599 597.742,194.728 597.743 C 192.857 597.744,192.135 597.801,193.124 597.870 M129.276 685.119 C 129.262 685.634,129.405 686.054,129.592 686.054 C 129.991 686.054,129.991 685.793,129.592 684.864 C 129.333 684.261,129.297 684.290,129.276 685.119 " stroke="none" fill="#e29c9c" fill-rule="evenodd"></path><path id="path1" d="M103.964 24.646 C 100.803 25.773,99.833 27.988,100.107 33.453 C 101.640 64.089,103.110 104.467,104.424 152.041 C 104.804 165.791,105.336 184.464,105.606 193.537 C 105.876 202.611,106.326 217.764,106.604 227.211 C 106.883 236.658,107.191 245.765,107.287 247.449 C 107.384 249.133,107.618 255.102,107.807 260.714 C 107.997 266.327,108.244 272.372,108.356 274.150 C 108.469 275.927,108.770 282.049,109.025 287.755 C 109.989 309.263,110.534 320.025,110.861 323.980 C 111.047 326.224,111.284 329.974,111.388 332.313 C 111.492 334.651,111.729 338.401,111.916 340.646 C 112.103 342.891,112.412 347.024,112.603 349.830 C 114.594 379.074,117.113 406.394,120.396 434.354 C 122.059 448.523,124.304 465.397,125.984 476.361 C 126.270 478.231,126.814 481.828,127.193 484.354 C 128.080 490.271,128.600 493.471,130.097 502.211 C 130.770 506.139,131.470 510.272,131.651 511.395 C 131.832 512.517,132.126 514.124,132.304 514.966 C 132.482 515.808,132.944 518.257,133.331 520.408 C 136.268 536.721,136.736 538.723,138.011 540.427 C 139.692 542.674,135.303 542.531,199.936 542.435 L 258.723 542.347 259.910 541.534 C 261.919 540.157,262.291 539.171,263.830 531.122 C 264.116 529.626,264.551 527.406,264.796 526.190 C 265.676 521.823,266.384 518.134,267.049 514.456 C 267.420 512.398,267.946 509.490,268.218 507.993 C 268.888 504.302,269.575 500.316,270.415 495.238 C 270.802 492.900,271.347 489.609,271.626 487.925 C 272.796 480.879,273.172 478.509,273.814 474.150 C 274.186 471.624,274.724 468.027,275.009 466.156 C 275.293 464.286,275.836 460.459,276.214 457.653 C 276.591 454.847,277.129 450.867,277.409 448.810 C 278.189 443.068,278.811 438.153,279.583 431.633 C 279.971 428.359,280.525 423.690,280.813 421.259 C 281.741 413.431,282.565 405.556,284.196 388.946 C 286.101 369.543,288.493 338.588,289.612 318.878 C 289.888 314.014,290.279 307.662,290.481 304.762 C 290.843 299.552,291.044 295.800,292.016 276.190 C 292.538 265.653,293.609 239.558,294.193 223.129 C 294.382 217.798,294.699 209.609,294.897 204.932 C 295.095 200.255,295.407 191.531,295.591 185.544 C 295.775 179.558,296.008 172.747,296.108 170.408 C 296.208 168.070,296.517 158.886,296.794 150.000 C 297.611 123.798,299.010 86.216,299.504 77.211 C 299.612 75.247,299.917 68.665,300.182 62.585 C 300.447 56.505,300.907 46.686,301.204 40.765 C 301.880 27.310,301.474 25.539,297.479 24.533 C 295.014 23.912,105.712 24.023,103.964 24.646 M290.467 37.670 C 290.462 38.185,290.312 40.978,290.133 43.878 C 288.777 65.875,287.014 107.785,285.211 160.884 C 284.922 169.396,284.532 180.876,284.345 186.395 C 283.194 220.370,282.317 243.543,281.455 262.755 C 276.714 368.486,268.094 445.786,252.331 523.910 L 250.904 530.984 226.047 530.756 C 212.376 530.631,189.105 530.432,174.335 530.315 L 147.479 530.102 146.182 523.469 C 131.338 447.566,123.277 370.459,119.906 272.109 C 119.800 269.022,119.562 262.211,119.378 256.973 C 119.007 246.471,118.303 219.248,117.516 185.034 C 115.869 113.464,114.097 59.552,112.738 39.711 L 112.534 36.735 201.505 36.735 L 290.476 36.735 290.467 37.670 M198.299 52.016 C 198.299 56.900,198.241 57.446,197.704 57.561 C 197.377 57.632,198.869 57.801,201.020 57.938 C 214.873 58.816,248.798 62.549,275.680 66.152 C 277.738 66.428,279.584 66.656,279.783 66.660 C 280.018 66.664,280.290 63.716,280.559 58.248 C 280.787 53.618,281.059 49.103,281.165 48.214 L 281.356 46.599 239.828 46.599 L 198.299 46.599 198.299 52.016 M269.898 70.771 C 256.135 71.294,235.390 71.771,216.667 71.993 C 206.097 72.119,197.640 72.286,197.874 72.364 C 198.214 72.477,198.299 117.590,198.299 296.416 L 198.299 520.327 217.432 520.564 C 227.955 520.695,238.242 520.751,240.292 520.690 L 244.018 520.578 244.301 519.218 C 244.886 516.393,247.636 501.924,248.954 494.728 C 256.470 453.688,263.045 402.826,266.828 356.463 C 268.074 341.178,268.393 337.000,269.034 327.551 C 271.791 286.864,273.517 249.647,275.688 184.014 C 277.562 127.351,279.001 89.138,279.814 74.405 L 280.034 70.408 278.367 70.460 C 277.451 70.489,273.639 70.629,269.898 70.771 M195.238 571.288 C 154.421 574.793,121.167 603.513,108.040 646.599 C 105.672 654.371,104.506 660.095,103.328 669.728 C 100.329 694.268,106.766 724.893,119.307 745.748 C 121.546 749.472,125.230 755.023,126.079 755.953 C 126.421 756.327,127.149 757.245,127.696 757.993 C 131.270 762.878,139.314 770.998,144.728 775.185 C 146.037 776.197,147.185 777.113,147.279 777.219 C 147.372 777.325,149.439 778.735,151.871 780.351 C 164.194 788.542,178.703 793.683,193.027 794.934 C 235.956 798.685,275.403 771.064,291.929 725.680 C 300.929 700.967,301.497 669.307,293.376 645.068 C 292.046 641.098,290.807 637.642,290.327 636.565 C 290.076 636.003,289.766 635.193,289.636 634.764 C 289.238 633.444,284.375 623.825,282.388 620.425 C 276.344 610.083,266.537 598.651,257.823 591.788 C 256.794 590.978,255.786 590.160,255.582 589.971 C 254.333 588.808,247.083 584.101,243.878 582.373 C 241.388 581.031,237.129 578.912,236.920 578.912 C 236.844 578.912,235.805 578.459,234.611 577.907 C 230.349 575.934,220.819 573.173,215.816 572.462 C 214.320 572.250,212.249 571.929,211.215 571.750 C 209.200 571.401,197.772 571.070,195.238 571.288 M207.921 595.545 C 222.654 598.156,239.454 605.357,248.275 612.841 L 249.441 613.830 248.453 615.069 C 247.539 616.214,247.413 616.270,246.776 615.811 C 225.737 600.650,191.232 603.394,167.517 622.113 C 147.844 637.642,133.277 670.138,129.694 706.490 L 129.103 712.480 127.911 712.211 C 125.537 711.676,125.356 710.536,125.605 697.669 C 126.167 668.725,132.989 639.637,143.382 621.882 C 153.473 604.640,165.565 597.169,187.245 594.780 C 190.979 594.369,204.003 594.850,207.921 595.545 " stroke="none" fill="#d42929" fill-rule="evenodd"></path><path id="path2" d="M142.177 59.862 C 132.684 60.338,123.312 60.950,123.044 61.111 C 122.686 61.327,122.734 105.049,123.133 140.816 C 123.856 205.675,125.789 253.919,130.100 314.626 C 131.555 335.130,131.994 341.050,132.101 341.667 C 132.351 343.093,132.288 337.652,131.980 331.122 C 131.803 327.381,131.427 316.667,131.145 307.313 C 130.863 297.959,130.549 288.240,130.448 285.714 C 128.838 245.625,130.223 139.988,133.206 75.306 L 133.427 70.510 140.438 70.285 C 149.857 69.982,191.664 69.134,209.184 68.890 C 231.656 68.577,256.100 68.034,258.503 67.794 C 262.792 67.366,224.553 62.959,201.701 61.247 C 182.506 59.809,155.676 59.185,142.177 59.862 M132.392 345.578 C 132.392 346.233,132.462 346.501,132.547 346.173 C 132.633 345.846,132.633 345.310,132.547 344.983 C 132.462 344.656,132.392 344.923,132.392 345.578 M185.204 598.361 C 161.824 601.963,150.946 610.749,141.065 634.014 C 135.659 646.740,130.693 668.085,129.787 682.483 L 129.594 685.544 130.740 681.122 C 141.344 640.192,160.124 616.413,189.796 606.348 C 200.177 602.827,215.109 601.627,224.150 603.588 C 225.772 603.940,221.581 602.354,218.197 601.335 C 208.174 598.317,193.862 597.027,185.204 598.361 " stroke="none" fill="#f7f5f5" fill-rule="evenodd"></path><path id="path3" d="M112.664 38.435 C 112.664 39.090,112.734 39.358,112.819 39.031 C 112.905 38.703,112.905 38.168,112.819 37.840 C 112.734 37.513,112.664 37.781,112.664 38.435 M289.898 45.238 C 289.898 46.267,289.962 46.688,290.040 46.173 C 290.117 45.659,290.117 44.817,290.040 44.303 C 289.962 43.788,289.898 44.209,289.898 45.238 M226.760 46.514 C 236.707 46.564,253.085 46.564,263.154 46.514 C 273.224 46.463,265.085 46.423,245.068 46.423 C 225.051 46.422,216.812 46.463,226.760 46.514 M125.850 51.997 L 125.850 57.395 124.150 57.621 L 122.449 57.847 122.508 60.811 C 122.541 62.441,122.625 63.146,122.696 62.378 L 122.824 60.980 127.313 60.588 C 133.991 60.005,145.618 59.540,155.782 59.450 C 163.460 59.382,163.876 59.355,158.588 59.269 L 152.381 59.168 152.381 57.815 L 152.381 56.463 161.820 56.469 C 170.540 56.476,181.481 56.780,193.452 57.351 L 198.299 57.581 198.299 52.090 L 198.299 46.599 162.075 46.599 L 125.850 46.599 125.850 51.997 M113.371 51.871 C 113.373 52.993,113.436 53.411,113.512 52.800 C 113.588 52.189,113.586 51.270,113.508 50.759 C 113.431 50.248,113.369 50.748,113.371 51.871 M289.535 51.361 C 289.535 52.015,289.605 52.283,289.690 51.956 C 289.776 51.628,289.776 51.093,289.690 50.765 C 289.605 50.438,289.535 50.706,289.535 51.361 M280.698 55.952 C 280.702 56.701,280.771 56.967,280.853 56.544 C 280.934 56.121,280.931 55.508,280.846 55.183 C 280.761 54.858,280.694 55.204,280.698 55.952 M113.703 59.354 C 113.705 60.289,113.771 60.631,113.850 60.114 C 113.928 59.597,113.926 58.832,113.845 58.414 C 113.764 57.995,113.700 58.418,113.703 59.354 M280.381 62.585 C 280.381 63.801,280.443 64.298,280.518 63.690 C 280.594 63.082,280.594 62.088,280.518 61.480 C 280.443 60.872,280.381 61.369,280.381 62.585 M288.877 64.626 C 288.877 65.655,288.941 66.076,289.019 65.561 C 289.097 65.047,289.097 64.205,289.019 63.690 C 288.941 63.176,288.877 63.597,288.877 64.626 M215.221 68.948 C 215.642 69.029,216.331 69.029,216.752 68.948 C 217.173 68.866,216.828 68.800,215.986 68.800 C 215.145 68.800,214.800 68.866,215.221 68.948 M196.854 69.294 C 197.462 69.369,198.457 69.369,199.065 69.294 C 199.673 69.218,199.175 69.156,197.959 69.156 C 196.743 69.156,196.246 69.218,196.854 69.294 M176.109 69.628 C 176.533 69.710,177.145 69.707,177.470 69.621 C 177.795 69.536,177.449 69.470,176.701 69.474 C 175.952 69.477,175.686 69.547,176.109 69.628 M160.471 69.979 C 161.459 70.048,162.990 70.047,163.872 69.977 C 164.754 69.908,163.946 69.851,162.075 69.852 C 160.204 69.853,159.482 69.910,160.471 69.979 M141.069 70.410 C 136.999 70.536,133.616 70.702,133.551 70.779 C 133.486 70.856,133.255 76.122,133.037 82.483 C 130.278 163.040,129.796 187.377,130.023 234.694 C 130.221 275.925,130.692 296.374,132.383 337.245 C 132.608 342.670,132.762 348.027,132.725 349.150 C 132.632 352.034,133.461 363.216,135.373 384.864 C 138.870 424.456,144.658 467.125,151.864 506.420 C 154.024 518.204,154.398 520.015,154.704 520.196 C 154.830 520.270,168.937 520.397,186.054 520.479 C 203.172 520.561,212.929 520.577,207.738 520.513 L 198.299 520.398 198.299 296.376 L 198.299 72.354 175.340 72.605 L 152.381 72.857 152.381 71.462 L 152.381 70.068 150.425 70.125 C 149.349 70.156,145.139 70.284,141.069 70.410 M288.528 71.429 C 288.528 72.270,288.594 72.615,288.675 72.194 C 288.756 71.773,288.756 71.084,288.675 70.663 C 288.594 70.242,288.528 70.587,288.528 71.429 M114.397 75.340 C 114.399 76.650,114.460 77.144,114.534 76.438 C 114.608 75.732,114.606 74.661,114.531 74.057 C 114.456 73.453,114.396 74.031,114.397 75.340 M279.678 76.701 C 279.681 77.449,279.751 77.715,279.832 77.292 C 279.914 76.869,279.911 76.257,279.826 75.931 C 279.740 75.606,279.674 75.952,279.678 76.701 M288.174 79.252 C 288.174 79.906,288.244 80.174,288.330 79.847 C 288.415 79.520,288.415 78.984,288.330 78.656 C 288.244 78.329,288.174 78.597,288.174 79.252 M114.728 84.014 C 114.728 85.043,114.792 85.463,114.869 84.949 C 114.947 84.435,114.947 83.593,114.869 83.078 C 114.792 82.564,114.728 82.985,114.728 84.014 M279.361 84.354 C 279.361 85.570,279.422 86.067,279.498 85.459 C 279.573 84.851,279.573 83.856,279.498 83.248 C 279.422 82.640,279.361 83.138,279.361 84.354 M278.997 91.327 C 279.001 92.075,279.071 92.341,279.152 91.918 C 279.233 91.495,279.230 90.882,279.145 90.557 C 279.060 90.232,278.994 90.578,278.997 91.327 M287.527 94.388 C 287.528 95.697,287.590 96.191,287.663 95.486 C 287.737 94.780,287.736 93.708,287.660 93.105 C 287.585 92.501,287.525 93.078,287.527 94.388 M115.052 94.048 C 115.056 94.796,115.125 95.062,115.207 94.639 C 115.288 94.216,115.285 93.604,115.200 93.278 C 115.115 92.953,115.048 93.299,115.052 94.048 M278.664 100.000 C 278.664 100.842,278.730 101.186,278.811 100.765 C 278.893 100.344,278.893 99.656,278.811 99.235 C 278.730 98.814,278.664 99.158,278.664 100.000 M287.161 102.551 C 287.164 103.299,287.234 103.565,287.315 103.142 C 287.397 102.719,287.394 102.107,287.309 101.782 C 287.223 101.457,287.157 101.803,287.161 102.551 M115.408 104.762 C 115.408 105.791,115.472 106.212,115.550 105.697 C 115.628 105.183,115.628 104.341,115.550 103.827 C 115.472 103.312,115.408 103.733,115.408 104.762 M278.343 108.673 C 278.344 109.983,278.406 110.477,278.480 109.771 C 278.553 109.066,278.552 107.994,278.477 107.390 C 278.402 106.787,278.341 107.364,278.343 108.673 M286.814 112.245 C 286.814 112.900,286.884 113.168,286.969 112.840 C 287.055 112.513,287.055 111.977,286.969 111.650 C 286.884 111.322,286.814 111.590,286.814 112.245 M115.767 114.796 C 115.766 116.480,115.823 117.211,115.895 116.422 C 115.966 115.632,115.967 114.255,115.897 113.361 C 115.826 112.466,115.768 113.112,115.767 114.796 M278.006 117.687 C 278.006 119.090,278.066 119.664,278.139 118.963 C 278.212 118.261,278.212 117.113,278.139 116.412 C 278.066 115.710,278.006 116.284,278.006 117.687 M286.511 119.898 C 286.512 121.395,286.572 121.964,286.644 121.164 C 286.716 120.364,286.715 119.140,286.642 118.443 C 286.569 117.747,286.510 118.401,286.511 119.898 M277.644 126.190 C 277.644 127.032,277.710 127.377,277.791 126.956 C 277.872 126.535,277.872 125.846,277.791 125.425 C 277.710 125.004,277.644 125.349,277.644 126.190 M116.088 126.871 C 116.088 127.900,116.152 128.321,116.230 127.806 C 116.308 127.292,116.308 126.450,116.230 125.935 C 116.152 125.421,116.088 125.842,116.088 126.871 M286.160 129.422 C 286.162 130.544,286.225 130.962,286.301 130.351 C 286.377 129.740,286.375 128.821,286.297 128.310 C 286.220 127.799,286.158 128.299,286.160 129.422 M277.320 136.395 C 277.320 137.611,277.381 138.108,277.457 137.500 C 277.532 136.892,277.532 135.897,277.457 135.289 C 277.381 134.681,277.320 135.179,277.320 136.395 M285.800 139.626 C 285.804 140.374,285.873 140.640,285.955 140.217 C 286.036 139.794,286.033 139.182,285.948 138.857 C 285.863 138.531,285.796 138.878,285.800 139.626 M116.424 140.986 C 116.426 141.922,116.492 142.264,116.571 141.747 C 116.649 141.230,116.647 140.465,116.566 140.046 C 116.485 139.628,116.421 140.051,116.424 140.986 M276.991 146.088 C 276.990 147.772,277.048 148.504,277.119 147.714 C 277.191 146.925,277.191 145.547,277.121 144.653 C 277.051 143.759,276.993 144.405,276.991 146.088 M285.489 148.980 C 285.489 150.383,285.549 150.957,285.622 150.255 C 285.695 149.554,285.695 148.406,285.622 147.704 C 285.549 147.003,285.489 147.577,285.489 148.980 M116.794 152.891 C 116.795 154.949,116.851 155.747,116.918 154.664 C 116.986 153.582,116.985 151.898,116.917 150.923 C 116.849 149.948,116.793 150.833,116.794 152.891 M276.616 154.932 C 276.620 155.680,276.690 155.946,276.771 155.523 C 276.853 155.100,276.849 154.488,276.764 154.163 C 276.679 153.838,276.613 154.184,276.616 154.932 M285.146 158.673 C 285.147 159.983,285.209 160.477,285.282 159.771 C 285.356 159.066,285.355 157.994,285.280 157.390 C 285.204 156.787,285.144 157.364,285.146 158.673 M276.292 165.986 C 276.292 167.015,276.356 167.436,276.434 166.922 C 276.512 166.407,276.512 165.565,276.434 165.051 C 276.356 164.537,276.292 164.957,276.292 165.986 M117.126 167.347 C 117.126 168.937,117.184 169.588,117.256 168.793 C 117.327 167.997,117.327 166.696,117.256 165.901 C 117.184 165.106,117.126 165.757,117.126 167.347 M284.787 169.048 C 284.787 169.889,284.853 170.234,284.934 169.813 C 285.015 169.392,285.015 168.703,284.934 168.282 C 284.853 167.861,284.787 168.206,284.787 169.048 M275.969 176.190 C 275.969 177.781,276.028 178.431,276.099 177.636 C 276.171 176.841,276.171 175.540,276.099 174.745 C 276.028 173.950,275.969 174.600,275.969 176.190 M284.440 180.442 C 284.443 181.190,284.513 181.457,284.594 181.033 C 284.676 180.610,284.673 179.998,284.587 179.673 C 284.502 179.348,284.436 179.694,284.440 180.442 M117.449 183.333 C 117.449 184.362,117.513 184.783,117.591 184.269 C 117.668 183.754,117.668 182.912,117.591 182.398 C 117.513 181.884,117.449 182.304,117.449 183.333 M275.612 185.374 C 275.612 186.403,275.676 186.824,275.754 186.310 C 275.832 185.795,275.832 184.953,275.754 184.439 C 275.676 183.924,275.612 184.345,275.612 185.374 M284.132 189.116 C 284.132 190.706,284.191 191.356,284.263 190.561 C 284.334 189.766,284.334 188.465,284.263 187.670 C 284.191 186.875,284.132 187.526,284.132 189.116 M117.816 196.939 C 117.816 199.090,117.871 199.970,117.938 198.895 C 118.006 197.819,118.006 196.059,117.938 194.983 C 117.871 193.907,117.816 194.787,117.816 196.939 M275.267 196.088 C 275.270 197.024,275.336 197.366,275.414 196.849 C 275.492 196.332,275.490 195.567,275.410 195.148 C 275.329 194.730,275.265 195.153,275.267 196.088 M283.771 199.150 C 283.773 200.085,283.839 200.427,283.918 199.910 C 283.996 199.393,283.994 198.628,283.913 198.210 C 283.832 197.791,283.768 198.214,283.771 199.150 M274.942 206.293 C 274.943 207.602,275.005 208.096,275.078 207.390 C 275.152 206.685,275.151 205.613,275.075 205.009 C 275.000 204.406,274.940 204.983,274.942 206.293 M118.146 210.544 C 118.146 212.134,118.205 212.785,118.276 211.990 C 118.348 211.195,118.348 209.894,118.276 209.099 C 118.205 208.304,118.146 208.954,118.146 210.544 M283.419 209.694 C 283.423 210.442,283.493 210.708,283.574 210.285 C 283.655 209.862,283.652 209.250,283.567 208.925 C 283.482 208.599,283.415 208.946,283.419 209.694 M274.606 215.816 C 274.608 217.313,274.667 217.883,274.739 217.083 C 274.811 216.283,274.810 215.058,274.737 214.362 C 274.664 213.665,274.605 214.320,274.606 215.816 M283.110 218.197 C 283.111 219.694,283.171 220.264,283.243 219.464 C 283.315 218.664,283.314 217.439,283.240 216.743 C 283.167 216.046,283.109 216.701,283.110 218.197 M274.235 224.660 C 274.239 225.408,274.309 225.674,274.390 225.251 C 274.472 224.828,274.468 224.216,274.383 223.891 C 274.298 223.565,274.232 223.912,274.235 224.660 M118.469 225.510 C 118.469 226.539,118.533 226.960,118.611 226.446 C 118.689 225.931,118.689 225.089,118.611 224.575 C 118.533 224.060,118.469 224.481,118.469 225.510 M282.755 227.551 C 282.755 228.580,282.819 229.001,282.897 228.486 C 282.975 227.972,282.975 227.130,282.897 226.616 C 282.819 226.101,282.755 226.522,282.755 227.551 M273.915 234.184 C 273.917 235.306,273.980 235.724,274.056 235.113 C 274.132 234.502,274.130 233.583,274.053 233.072 C 273.975 232.561,273.913 233.061,273.915 234.184 M282.392 237.075 C 282.392 237.730,282.462 237.997,282.547 237.670 C 282.633 237.343,282.633 236.807,282.547 236.480 C 282.462 236.152,282.392 236.420,282.392 237.075 M118.816 238.776 C 118.816 239.991,118.878 240.489,118.954 239.881 C 119.029 239.273,119.029 238.278,118.954 237.670 C 118.878 237.062,118.816 237.560,118.816 238.776 M273.584 242.517 C 273.584 243.920,273.644 244.494,273.717 243.793 C 273.791 243.091,273.791 241.943,273.717 241.241 C 273.644 240.540,273.584 241.114,273.584 242.517 M282.082 245.238 C 282.082 246.454,282.143 246.952,282.219 246.344 C 282.294 245.736,282.294 244.741,282.219 244.133 C 282.143 243.525,282.082 244.022,282.082 245.238 M119.168 249.150 C 119.167 250.833,119.225 251.565,119.296 250.776 C 119.368 249.986,119.368 248.609,119.298 247.714 C 119.228 246.820,119.169 247.466,119.168 249.150 M273.215 250.170 C 273.219 250.918,273.288 251.184,273.370 250.761 C 273.451 250.338,273.448 249.726,273.363 249.401 C 273.278 249.076,273.211 249.422,273.215 250.170 M281.735 253.061 C 281.735 254.090,281.798 254.511,281.876 253.997 C 281.954 253.482,281.954 252.640,281.876 252.126 C 281.798 251.611,281.735 252.032,281.735 253.061 M272.875 258.673 C 272.879 259.422,272.948 259.688,273.030 259.265 C 273.111 258.842,273.108 258.229,273.023 257.904 C 272.938 257.579,272.871 257.925,272.875 258.673 M119.485 260.034 C 119.488 260.969,119.554 261.312,119.632 260.795 C 119.710 260.278,119.708 259.512,119.627 259.094 C 119.546 258.676,119.482 259.099,119.485 260.034 M281.371 261.224 C 281.371 261.879,281.441 262.147,281.527 261.820 C 281.613 261.492,281.613 260.957,281.527 260.629 C 281.441 260.302,281.371 260.570,281.371 261.224 M272.558 266.327 C 272.558 267.543,272.620 268.040,272.695 267.432 C 272.770 266.824,272.770 265.829,272.695 265.221 C 272.620 264.613,272.558 265.111,272.558 266.327 M119.807 271.088 C 119.807 271.743,119.877 272.011,119.962 271.684 C 120.048 271.356,120.048 270.821,119.962 270.493 C 119.877 270.166,119.807 270.434,119.807 271.088 M272.195 272.619 C 272.198 273.367,272.268 273.633,272.349 273.210 C 272.431 272.787,272.428 272.175,272.343 271.850 C 272.257 271.525,272.191 271.871,272.195 272.619 M280.714 275.510 C 280.714 276.539,280.778 276.960,280.856 276.446 C 280.934 275.931,280.934 275.089,280.856 274.575 C 280.778 274.060,280.714 274.481,280.714 275.510 M120.182 279.252 C 120.182 280.655,120.242 281.229,120.316 280.527 C 120.389 279.826,120.389 278.678,120.316 277.976 C 120.242 277.275,120.182 277.849,120.182 279.252 M271.848 279.932 C 271.848 280.587,271.918 280.855,272.003 280.527 C 272.089 280.200,272.089 279.664,272.003 279.337 C 271.918 279.009,271.848 279.277,271.848 279.932 M280.351 282.313 C 280.351 282.968,280.421 283.236,280.507 282.908 C 280.592 282.581,280.592 282.045,280.507 281.718 C 280.421 281.390,280.351 281.658,280.351 282.313 M271.526 286.905 C 271.528 287.840,271.594 288.182,271.673 287.665 C 271.751 287.148,271.749 286.383,271.668 285.965 C 271.587 285.546,271.523 285.969,271.526 286.905 M120.505 287.585 C 120.508 288.520,120.574 288.863,120.652 288.346 C 120.730 287.829,120.728 287.063,120.648 286.645 C 120.567 286.227,120.503 286.650,120.505 287.585 M271.190 293.197 C 271.190 294.226,271.254 294.647,271.332 294.133 C 271.410 293.618,271.410 292.776,271.332 292.262 C 271.254 291.747,271.190 292.168,271.190 293.197 M279.694 295.238 C 279.694 296.267,279.758 296.688,279.835 296.173 C 279.913 295.659,279.913 294.817,279.835 294.303 C 279.758 293.788,279.694 294.209,279.694 295.238 M120.827 296.259 C 120.827 296.913,120.897 297.181,120.983 296.854 C 121.068 296.526,121.068 295.991,120.983 295.663 C 120.897 295.336,120.827 295.604,120.827 296.259 M279.331 301.020 C 279.331 301.675,279.401 301.943,279.486 301.616 C 279.572 301.288,279.572 300.753,279.486 300.425 C 279.401 300.098,279.331 300.366,279.331 301.020 M121.190 303.061 C 121.190 304.090,121.254 304.511,121.332 303.997 C 121.410 303.482,121.410 302.640,121.332 302.126 C 121.254 301.611,121.190 302.032,121.190 303.061 M270.494 304.932 C 270.498 305.680,270.567 305.946,270.649 305.523 C 270.730 305.100,270.727 304.488,270.642 304.163 C 270.557 303.838,270.490 304.184,270.494 304.932 M121.521 309.864 C 121.521 310.706,121.588 311.050,121.669 310.629 C 121.750 310.208,121.750 309.520,121.669 309.099 C 121.588 308.678,121.521 309.022,121.521 309.864 M270.170 310.544 C 270.170 311.573,270.234 311.994,270.312 311.480 C 270.390 310.965,270.390 310.123,270.312 309.609 C 270.234 309.094,270.170 309.515,270.170 310.544 M278.664 312.585 C 278.664 313.427,278.730 313.771,278.811 313.350 C 278.893 312.929,278.893 312.241,278.811 311.820 C 278.730 311.399,278.664 311.743,278.664 312.585 M278.317 317.517 C 278.321 318.265,278.390 318.531,278.472 318.108 C 278.553 317.685,278.550 317.073,278.465 316.748 C 278.380 316.423,278.313 316.769,278.317 317.517 M269.467 321.088 C 269.467 321.743,269.537 322.011,269.622 321.684 C 269.708 321.356,269.708 320.821,269.622 320.493 C 269.537 320.166,269.467 320.434,269.467 321.088 M122.188 323.469 C 122.188 324.124,122.258 324.392,122.343 324.065 C 122.429 323.737,122.429 323.202,122.343 322.874 C 122.258 322.547,122.188 322.815,122.188 323.469 M269.140 326.190 C 269.140 327.032,269.207 327.377,269.288 326.956 C 269.369 326.535,269.369 325.846,269.288 325.425 C 269.207 325.004,269.140 325.349,269.140 326.190 M122.542 328.912 C 122.542 329.753,122.608 330.098,122.689 329.677 C 122.770 329.256,122.770 328.567,122.689 328.146 C 122.608 327.725,122.542 328.070,122.542 328.912 M277.304 332.653 C 277.304 333.495,277.370 333.839,277.451 333.418 C 277.532 332.997,277.532 332.309,277.451 331.888 C 277.370 331.467,277.304 331.811,277.304 332.653 M268.106 340.476 C 268.106 341.131,268.176 341.399,268.262 341.071 C 268.347 340.744,268.347 340.208,268.262 339.881 C 268.176 339.554,268.106 339.821,268.106 340.476 M267.773 344.728 C 267.777 345.476,267.846 345.742,267.928 345.319 C 268.009 344.896,268.006 344.284,267.921 343.959 C 267.836 343.633,267.769 343.980,267.773 344.728 M123.555 345.408 C 123.559 346.156,123.629 346.423,123.710 345.999 C 123.791 345.576,123.788 344.964,123.703 344.639 C 123.618 344.314,123.551 344.660,123.555 345.408 M276.276 346.429 C 276.280 347.177,276.350 347.443,276.431 347.020 C 276.512 346.597,276.509 345.984,276.424 345.659 C 276.339 345.334,276.272 345.680,276.276 346.429 M266.752 357.313 C 266.756 358.061,266.826 358.327,266.907 357.904 C 266.989 357.481,266.986 356.869,266.900 356.544 C 266.815 356.218,266.749 356.565,266.752 357.313 M124.576 359.694 C 124.579 360.442,124.649 360.708,124.730 360.285 C 124.812 359.862,124.809 359.250,124.723 358.925 C 124.638 358.599,124.572 358.946,124.576 359.694 M274.909 362.925 C 274.909 363.580,274.979 363.848,275.064 363.520 C 275.150 363.193,275.150 362.657,275.064 362.330 C 274.979 362.003,274.909 362.270,274.909 362.925 M265.725 369.048 C 265.725 369.702,265.795 369.970,265.881 369.643 C 265.966 369.315,265.966 368.780,265.881 368.452 C 265.795 368.125,265.725 368.393,265.725 369.048 M273.888 374.150 C 273.888 374.804,273.958 375.072,274.044 374.745 C 274.130 374.418,274.130 373.882,274.044 373.554 C 273.958 373.227,273.888 373.495,273.888 374.150 M125.929 376.871 C 125.929 377.526,125.999 377.793,126.085 377.466 C 126.170 377.139,126.170 376.603,126.085 376.276 C 125.999 375.948,125.929 376.216,125.929 376.871 M264.365 383.333 C 264.365 383.988,264.435 384.256,264.520 383.929 C 264.606 383.601,264.606 383.065,264.520 382.738 C 264.435 382.411,264.365 382.679,264.365 383.333 M126.950 388.435 C 126.950 389.090,127.020 389.358,127.105 389.031 C 127.191 388.703,127.191 388.168,127.105 387.840 C 127.020 387.513,126.950 387.781,126.950 388.435 M263.344 393.197 C 263.344 393.852,263.414 394.120,263.500 393.793 C 263.585 393.465,263.585 392.929,263.500 392.602 C 263.414 392.275,263.344 392.543,263.344 393.197 M127.970 398.980 C 127.970 399.634,128.040 399.902,128.126 399.575 C 128.211 399.247,128.211 398.712,128.126 398.384 C 128.040 398.057,127.970 398.325,127.970 398.980 M240.986 520.748 L 237.925 520.960 240.881 521.024 C 242.558 521.061,243.928 520.941,244.048 520.748 C 244.163 520.561,244.211 520.437,244.153 520.472 C 244.095 520.508,242.670 520.632,240.986 520.748 M147.386 529.422 C 147.439 529.949,147.721 530.112,148.642 530.146 C 149.792 530.189,149.795 530.186,148.746 530.041 C 148.114 529.954,147.590 529.652,147.490 529.317 C 147.365 528.901,147.337 528.930,147.386 529.422 M191.902 530.526 C 194.276 530.584,198.255 530.585,200.745 530.526 C 203.235 530.468,201.293 530.421,196.429 530.420 C 191.565 530.420,189.528 530.468,191.902 530.526 M236.500 530.867 C 239.271 530.924,243.710 530.924,246.364 530.866 C 249.019 530.809,246.752 530.762,241.327 530.762 C 235.901 530.763,233.730 530.810,236.500 530.867 " stroke="none" fill="#dc7676" fill-rule="evenodd"></path><path id="path4" d="M152.381 57.720 L 152.381 59.085 163.350 59.319 C 180.446 59.683,196.180 60.473,207.993 61.559 C 228.371 63.433,261.605 67.274,262.149 67.818 C 262.264 67.933,261.453 68.027,260.346 68.028 C 259.239 68.028,251.675 68.177,243.537 68.358 C 235.400 68.539,219.787 68.843,208.844 69.034 C 197.900 69.224,180.719 69.562,170.663 69.785 L 152.381 70.190 152.381 71.490 L 152.381 72.789 157.908 72.789 C 186.403 72.785,279.227 70.887,279.819 70.295 C 280.263 69.850,280.329 66.666,279.894 66.660 C 279.634 66.656,277.738 66.428,275.680 66.152 C 226.807 59.602,197.459 57.000,167.602 56.572 L 152.381 56.354 152.381 57.720 M187.245 594.780 C 165.565 597.169,153.473 604.640,143.382 621.882 C 132.989 639.637,126.167 668.725,125.605 697.669 C 125.356 710.536,125.537 711.676,127.911 712.211 L 129.103 712.480 129.694 706.490 C 133.277 670.138,147.844 637.642,167.517 622.113 C 191.232 603.394,225.737 600.650,246.776 615.811 C 247.413 616.270,247.539 616.214,248.453 615.069 L 249.441 613.830 248.275 612.841 C 240.981 606.652,225.693 599.521,213.534 596.636 C 206.849 595.050,193.409 594.101,187.245 594.780 M201.597 597.986 C 206.904 598.434,212.896 599.590,218.065 601.162 C 222.008 602.361,227.056 604.245,225.510 603.940 C 204.405 599.780,180.617 606.564,163.121 621.733 C 148.287 634.594,136.384 656.972,130.447 683.163 C 128.791 690.469,128.759 690.361,129.772 680.952 C 133.781 643.712,145.345 616.674,161.917 605.792 C 171.028 599.810,186.689 596.729,201.597 597.986 " stroke="none" fill="#353131" fill-rule="evenodd"> '+
        		'</path></g>';
    	});
    }

    function appendInfoPanel(container) {
        return container.append('div').attr('class', 'neo4jd3-info');
    }

    function appendInfoElement(cls, isNode, property, value) {
        var elem = info.append('li');/*.append('a');*/
        if((getIsEmptyOrNull( value ) || value == "null") && (nodeLabels.includes(property))) {
        	elem.style('display','none');
        }
        else {
        	if(property == "displayText") {
        		if(value == "null") elem.style('display','none');
        		else elem.attr('class', cls).html(value);
        	}
        	else {
                elem/*.attr('href', '#')*/.attr('class', cls).html('<strong>' + property + '</strong>' + (value ? (': ' + value) : ''));
        	}
        }
        if (!value) {
            elem.style('background-color', function(d) {
                    return options.nodeOutlineFillColor ? options.nodeOutlineFillColor : (isNode ? class2color(property) : defaultColor());
                })
                .style('border-color', function(d) {
                    return options.nodeOutlineFillColor ? class2darkenColor(options.nodeOutlineFillColor) : (isNode ? class2darkenColor(property) : defaultDarkenColor());
                })
                .style('color', function(d) {
                    return options.nodeOutlineFillColor ? class2darkenColor(options.nodeOutlineFillColor) : '#fff';
                });
        }
    }

    function appendInfoElementClass(cls, node) {
        appendInfoElement(cls, true, node);
    }

    function appendInfoElementProperty(cls, property, value) {
        appendInfoElement(cls, false, property, value);
    }

    function appendInfoElementRelationship(cls, relationship) {
        appendInfoElement(cls, false, relationship);
    }

    function appendNode() {
        return node.enter()
                   .append('g')
                   .attr('class', function(d) {
                       var highlight, i, classes = 'node', label = d.labels[0];
                       if (icon(d)) { classes += ' node-icon'; }
                       if (image(d)) { classes += ' node-image'; }
                       if (options.highlight) {
                           for (i = 0; i < options.highlight.length; i++) {
                               highlight = options.highlight[i];
                               if (d.labels[0] === highlight.class && d.properties[highlight.property] === highlight.value) {
                                   classes += ' node-highlighted';
                                   break;
                               }
                           }
                       }
                       return classes;
                   })
                   .on('click', function(d) {
                       d.fx = d.fy = null;
                       //added
                       //if (info) { updateInfo(d); }
                       if (typeof options.onNodeClick === 'function') { options.onNodeClick(d); }
                   })
                   .on('dblclick', function(d) {
                       stickNode(d);
                       if (typeof options.onNodeDoubleClick === 'function') { options.onNodeDoubleClick(d); }
                   })
                   .on('mouseenter', function(d) {
                       //*if (info) { updateInfo(d); }
                       if (typeof options.onNodeMouseEnter === 'function') { options.onNodeMouseEnter(d); }
                   })
                   .on('mouseleave', function(d) {
                      // if (info) { clearInfo(); }
                       if (typeof options.onNodeMouseLeave === 'function') { options.onNodeMouseLeave(d); }
                   })
                   .call(d3.drag().on('start', dragStarted).on('drag', dragged).on('end', dragEnded));
    }

    function appendNodeToGraph() {
        var n = appendNode();
        appendRingToNode(n);
        appendOutlineToNode(n);
        if (options.icons) { appendTextToNode(n); }
        if (options.images) { appendImageToNode(n); }
        return n;
    }

    function appendOutlineToNode(node) {
        return node.append('circle').attr('class', 'outline').attr('r', options.nodeRadius)
                   .style('fill', function(d) {
                       return options.nodeOutlineFillColor ? options.nodeOutlineFillColor : class2color(d.labels[0]);
                   })
                   .style('stroke', function(d) {
                       return options.nodeOutlineFillColor ? class2darkenColor(options.nodeOutlineFillColor) : class2darkenColor(d.labels[0]);
                   })
                   .append('title').text(function(d) {
                       return toString(d);
                   });
    }

    function appendRingToNode(node) {
        return node.append('circle').attr('class', 'ring').attr('r', options.nodeRadius * 1.16)
                   .append('title').text(function(d) { return toString(d); });
    }

    String.prototype.truncStr = String.prototype.truncStr ||
    function(n){
        return (this.length > n) ? this.substr(0, n-1) + '..' : this;
    };

    function appendTextToNode(node) {
        return node.append('text')
                   .attr('class', function(d) { return 'text' + (icon(d) ? ' icon' : ''); })
                   .attr('fill', '#ffffff')
                   .attr('font-size', function(d) { return icon(d) ? (options.nodeRadius + 'px') : '10px'; })
                   .attr('pointer-events', 'none')
                   .attr('text-anchor', 'middle')
                   .attr('y', function(d) { return icon(d) ? (parseInt(Math.round(options.nodeRadius * 0.32)) + 'px') : '4px'; })
                   .html(function(d) {
                       var _icon = icon(d);
                       var str = d.properties.displayText;
                       if(null == str) return _icon ? '&#x' + _icon : str;
                       else {
                           var displayText = str.truncStr(9);
                           return _icon ? '&#x' + _icon : displayText;                    	   
                       }
                   });
    }

    function appendRandomDataToNode(d, maxNodesToGenerate) {
        var data = randomD3Data(d, maxNodesToGenerate);
        updateWithNeo4jData(data);
    }

    function appendRelationship() {
        return relationship.enter().append('g').attr('class', 'relationship')
                           .on('dblclick', function(d) {
                               if (typeof options.onRelationshipDoubleClick === 'function') {
                                   options.onRelationshipDoubleClick(d);
                               }
                           });//.on('mouseenter', function(d) { if (info) { updateInfo(d); } });
    }

    function appendOutlineToRelationship(r) {
        return r.append('path').attr('class', 'outline').attr('fill', '#a5abb6').attr('stroke', 'none');
    }

    function appendOverlayToRelationship(r) {
        return r.append('path').attr('class', 'overlay');
    }

    function appendTextToRelationship(r) {
        return r.append('text').attr('class', 'text').attr('fill', '#000000').attr('font-size', '8px').attr('pointer-events', 'none')
                .attr('text-anchor', 'middle').text(function(d) { return d.type; });
    }

    function appendRelationshipToGraph() {
        var relationship = appendRelationship(),
            text = appendTextToRelationship(relationship),
            outline = appendOutlineToRelationship(relationship),
            overlay = appendOverlayToRelationship(relationship);

        return {
            outline: outline,
            overlay: overlay,
            relationship: relationship,
            text: text
        };
    }

    function class2color(cls) {
        var color = classes2colors[cls];
        if (!color) {
        	//color = options.colors[Math.min(numClasses, options.colors.length - 1)];
            color = options.colors[numClasses % options.colors.length];
            classes2colors[cls] = color;
            numClasses++;
        }
        return color;
    }

    function class2darkenColor(cls) {
        return d3.rgb(class2color(cls)).darker(1);
    }

    function clearInfo() {
        info.html('');
    }

    function color() {
        return options.colors[options.colors.length * Math.random() << 0];
    }

    function colors() {
        // d3.schemeCategory10, d3.schemeCategory20,
        return [ '#68bdf6', /* light blue*/ '#6dce9e', /* green #1 */'#faafc2', /* light pink*/'#f2baf6', /* purple*/'#ff928c', /* light red*/'#fcea7e', /* light yellow*/'#ffc766', /* light orange*/'#405f9e', /* navy blue*/'#a5abb6', /* dark gray*/'#78cecb', /* green #2,*/'#b88cbb', /* dark purple*/'#ced2d9', /* light gray*/'#e84646', /* dark red*/'#fa5f86', /* dark pink*/'#ffab1a', /* dark orange*/'#fcda19', /* dark yellow*/'#797b80', /* black*/'#c9d96f', /* pistacchio*/'#47991f', /* green #3*/'#70edee', /* turquoise*/'#ff75ea'  /* pink*/ ];
    }

    function contains(array, id) {
        var filter = array.filter(function(elem) { return elem.id === id; });
        return filter.length > 0;
    }

    function defaultColor() {
        return options.relationshipColor;
    }

    function defaultDarkenColor() {
        return d3.rgb(options.colors[options.colors.length - 1]).darker(1);
    }

    function dragEnded(d) {
        if (!d3.event.active) { simulation.alphaTarget(0); }
        if (typeof options.onNodeDragEnd === 'function') { options.onNodeDragEnd(d); }
    }

    function dragged(d) {
        stickNode(d);
    }

    function dragStarted(d) {
        if (!d3.event.active) { simulation.alphaTarget(0.3).restart(); }
        d.fx = d.x;
        d.fy = d.y;
        if (typeof options.onNodeDragStart === 'function') { options.onNodeDragStart(d); }
    }

    function extend(obj1, obj2) {
        var obj = {};
        merge(obj, obj1);
        merge(obj, obj2);
        return obj;
    }

    /*function fontAwesomeIcons() {
        return {'glass':'f000','music':'f001','search':'f002','envelope-o':'f003','heart':'f004','star':'f005','star-o':'f006','user':'f007','film':'f008','th-large':'f009','th':'f00a','th-list':'f00b','check':'f00c','remove,close,times':'f00d','search-plus':'f00e','search-minus':'f010','power-off':'f011','signal':'f012','gear,cog':'f013','trash-o':'f014','home':'f015','file-o':'f016','clock-o':'f017','road':'f018','download':'f019','arrow-circle-o-down':'f01a','arrow-circle-o-up':'f01b','inbox':'f01c','play-circle-o':'f01d','rotate-right,repeat':'f01e','refresh':'f021','list-alt':'f022','lock':'f023','flag':'f024','headphones':'f025','volume-off':'f026','volume-down':'f027','volume-up':'f028','qrcode':'f029','barcode':'f02a','tag':'f02b','tags':'f02c','book':'f02d','bookmark':'f02e','print':'f02f','camera':'f030','font':'f031','bold':'f032','italic':'f033','text-height':'f034','text-width':'f035','align-left':'f036','align-center':'f037','align-right':'f038','align-justify':'f039','list':'f03a','dedent,outdent':'f03b','indent':'f03c','video-camera':'f03d','photo,image,picture-o':'f03e','pencil':'f040','map-marker':'f041','adjust':'f042','tint':'f043','edit,pencil-square-o':'f044','share-square-o':'f045','check-square-o':'f046','arrows':'f047','step-backward':'f048','fast-backward':'f049','backward':'f04a','play':'f04b','pause':'f04c','stop':'f04d','forward':'f04e','fast-forward':'f050','step-forward':'f051','eject':'f052','chevron-left':'f053','chevron-right':'f054','plus-circle':'f055','minus-circle':'f056','times-circle':'f057','check-circle':'f058','question-circle':'f059','info-circle':'f05a','crosshairs':'f05b','times-circle-o':'f05c','check-circle-o':'f05d','ban':'f05e','arrow-left':'f060','arrow-right':'f061','arrow-up':'f062','arrow-down':'f063','mail-forward,share':'f064','expand':'f065','compress':'f066','plus':'f067','minus':'f068','asterisk':'f069','exclamation-circle':'f06a','gift':'f06b','leaf':'f06c','fire':'f06d','eye':'f06e','eye-slash':'f070','warning,exclamation-triangle':'f071','plane':'f072','calendar':'f073','random':'f074','comment':'f075','magnet':'f076','chevron-up':'f077','chevron-down':'f078','retweet':'f079','shopping-cart':'f07a','folder':'f07b','folder-open':'f07c','arrows-v':'f07d','arrows-h':'f07e','bar-chart-o,bar-chart':'f080','twitter-square':'f081','facebook-square':'f082','camera-retro':'f083','key':'f084','gears,cogs':'f085','comments':'f086','thumbs-o-up':'f087','thumbs-o-down':'f088','star-half':'f089','heart-o':'f08a','sign-out':'f08b','linkedin-square':'f08c','thumb-tack':'f08d','external-link':'f08e','sign-in':'f090','trophy':'f091','github-square':'f092','upload':'f093','lemon-o':'f094','phone':'f095','square-o':'f096','bookmark-o':'f097','phone-square':'f098','twitter':'f099','facebook-f,facebook':'f09a','github':'f09b','unlock':'f09c','credit-card':'f09d','feed,rss':'f09e','hdd-o':'f0a0','bullhorn':'f0a1','bell':'f0f3','certificate':'f0a3','hand-o-right':'f0a4','hand-o-left':'f0a5','hand-o-up':'f0a6','hand-o-down':'f0a7','arrow-circle-left':'f0a8','arrow-circle-right':'f0a9','arrow-circle-up':'f0aa','arrow-circle-down':'f0ab','globe':'f0ac','wrench':'f0ad','tasks':'f0ae','filter':'f0b0','briefcase':'f0b1','arrows-alt':'f0b2','group,users':'f0c0','chain,link':'f0c1','cloud':'f0c2','flask':'f0c3','cut,scissors':'f0c4','copy,files-o':'f0c5','paperclip':'f0c6','save,floppy-o':'f0c7','square':'f0c8','navicon,reorder,bars':'f0c9','list-ul':'f0ca','list-ol':'f0cb','strikethrough':'f0cc','underline':'f0cd','table':'f0ce','magic':'f0d0','truck':'f0d1','pinterest':'f0d2','pinterest-square':'f0d3','google-plus-square':'f0d4','google-plus':'f0d5','money':'f0d6','caret-down':'f0d7','caret-up':'f0d8','caret-left':'f0d9','caret-right':'f0da','columns':'f0db','unsorted,sort':'f0dc','sort-down,sort-desc':'f0dd','sort-up,sort-asc':'f0de','envelope':'f0e0','linkedin':'f0e1','rotate-left,undo':'f0e2','legal,gavel':'f0e3','dashboard,tachometer':'f0e4','comment-o':'f0e5','comments-o':'f0e6','flash,bolt':'f0e7','sitemap':'f0e8','umbrella':'f0e9','paste,clipboard':'f0ea','lightbulb-o':'f0eb','exchange':'f0ec','cloud-download':'f0ed','cloud-upload':'f0ee','user-md':'f0f0','stethoscope':'f0f1','suitcase':'f0f2','bell-o':'f0a2','coffee':'f0f4','cutlery':'f0f5','file-text-o':'f0f6','building-o':'f0f7','hospital-o':'f0f8','ambulance':'f0f9','medkit':'f0fa','fighter-jet':'f0fb','beer':'f0fc','h-square':'f0fd','plus-square':'f0fe','angle-double-left':'f100','angle-double-right':'f101','angle-double-up':'f102','angle-double-down':'f103','angle-left':'f104','angle-right':'f105','angle-up':'f106','angle-down':'f107','desktop':'f108','laptop':'f109','tablet':'f10a','mobile-phone,mobile':'f10b','circle-o':'f10c','quote-left':'f10d','quote-right':'f10e','spinner':'f110','circle':'f111','mail-reply,reply':'f112','github-alt':'f113','folder-o':'f114','folder-open-o':'f115','smile-o':'f118','frown-o':'f119','meh-o':'f11a','gamepad':'f11b','keyboard-o':'f11c','flag-o':'f11d','flag-checkered':'f11e','terminal':'f120','code':'f121','mail-reply-all,reply-all':'f122','star-half-empty,star-half-full,star-half-o':'f123','location-arrow':'f124','crop':'f125','code-fork':'f126','unlink,chain-broken':'f127','question':'f128','info':'f129','exclamation':'f12a','superscript':'f12b','subscript':'f12c','eraser':'f12d','puzzle-piece':'f12e','microphone':'f130','microphone-slash':'f131','shield':'f132','calendar-o':'f133','fire-extinguisher':'f134','rocket':'f135','maxcdn':'f136','chevron-circle-left':'f137','chevron-circle-right':'f138','chevron-circle-up':'f139','chevron-circle-down':'f13a','html5':'f13b','css3':'f13c','anchor':'f13d','unlock-alt':'f13e','bullseye':'f140','ellipsis-h':'f141','ellipsis-v':'f142','rss-square':'f143','play-circle':'f144','ticket':'f145','minus-square':'f146','minus-square-o':'f147','level-up':'f148','level-down':'f149','check-square':'f14a','pencil-square':'f14b','external-link-square':'f14c','share-square':'f14d','compass':'f14e','toggle-down,caret-square-o-down':'f150','toggle-up,caret-square-o-up':'f151','toggle-right,caret-square-o-right':'f152','euro,eur':'f153','gbp':'f154','dollar,usd':'f155','rupee,inr':'f156','cny,rmb,yen,jpy':'f157','ruble,rouble,rub':'f158','won,krw':'f159','bitcoin,btc':'f15a','file':'f15b','file-text':'f15c','sort-alpha-asc':'f15d','sort-alpha-desc':'f15e','sort-amount-asc':'f160','sort-amount-desc':'f161','sort-numeric-asc':'f162','sort-numeric-desc':'f163','thumbs-up':'f164','thumbs-down':'f165','youtube-square':'f166','youtube':'f167','xing':'f168','xing-square':'f169','youtube-play':'f16a','dropbox':'f16b','stack-overflow':'f16c','instagram':'f16d','flickr':'f16e','adn':'f170','bitbucket':'f171','bitbucket-square':'f172','tumblr':'f173','tumblr-square':'f174','long-arrow-down':'f175','long-arrow-up':'f176','long-arrow-left':'f177','long-arrow-right':'f178','apple':'f179','windows':'f17a','android':'f17b','linux':'f17c','dribbble':'f17d','skype':'f17e','foursquare':'f180','trello':'f181','female':'f182','male':'f183','gittip,gratipay':'f184','sun-o':'f185','moon-o':'f186','archive':'f187','bug':'f188','vk':'f189','weibo':'f18a','renren':'f18b','pagelines':'f18c','stack-exchange':'f18d','arrow-circle-o-right':'f18e','arrow-circle-o-left':'f190','toggle-left,caret-square-o-left':'f191','dot-circle-o':'f192','wheelchair':'f193','vimeo-square':'f194','turkish-lira,try':'f195','plus-square-o':'f196','space-shuttle':'f197','slack':'f198','envelope-square':'f199','wordpress':'f19a','openid':'f19b','institution,bank,university':'f19c','mortar-board,graduation-cap':'f19d','yahoo':'f19e','google':'f1a0','reddit':'f1a1','reddit-square':'f1a2','stumbleupon-circle':'f1a3','stumbleupon':'f1a4','delicious':'f1a5','digg':'f1a6','pied-piper-pp':'f1a7','pied-piper-alt':'f1a8','drupal':'f1a9','joomla':'f1aa','language':'f1ab','fax':'f1ac','building':'f1ad','child':'f1ae','paw':'f1b0','spoon':'f1b1','cube':'f1b2','cubes':'f1b3','behance':'f1b4','behance-square':'f1b5','steam':'f1b6','steam-square':'f1b7','recycle':'f1b8','automobile,car':'f1b9','cab,taxi':'f1ba','tree':'f1bb','spotify':'f1bc','deviantart':'f1bd','soundcloud':'f1be','database':'f1c0','file-pdf-o':'f1c1','file-word-o':'f1c2','file-excel-o':'f1c3','file-powerpoint-o':'f1c4','file-photo-o,file-picture-o,file-image-o':'f1c5','file-zip-o,file-archive-o':'f1c6','file-sound-o,file-audio-o':'f1c7','file-movie-o,file-video-o':'f1c8','file-code-o':'f1c9','vine':'f1ca','codepen':'f1cb','jsfiddle':'f1cc','life-bouy,life-buoy,life-saver,support,life-ring':'f1cd','circle-o-notch':'f1ce','ra,resistance,rebel':'f1d0','ge,empire':'f1d1','git-square':'f1d2','git':'f1d3','y-combinator-square,yc-square,hacker-news':'f1d4','tencent-weibo':'f1d5','qq':'f1d6','wechat,weixin':'f1d7','send,paper-plane':'f1d8','send-o,paper-plane-o':'f1d9','history':'f1da','circle-thin':'f1db','header':'f1dc','paragraph':'f1dd','sliders':'f1de','share-alt':'f1e0','share-alt-square':'f1e1','bomb':'f1e2','soccer-ball-o,futbol-o':'f1e3','tty':'f1e4','binoculars':'f1e5','plug':'f1e6','slideshare':'f1e7','twitch':'f1e8','yelp':'f1e9','newspaper-o':'f1ea','wifi':'f1eb','calculator':'f1ec','paypal':'f1ed','google-wallet':'f1ee','cc-visa':'f1f0','cc-mastercard':'f1f1','cc-discover':'f1f2','cc-amex':'f1f3','cc-paypal':'f1f4','cc-stripe':'f1f5','bell-slash':'f1f6','bell-slash-o':'f1f7','trash':'f1f8','copyright':'f1f9','at':'f1fa','eyedropper':'f1fb','paint-brush':'f1fc','birthday-cake':'f1fd','area-chart':'f1fe','pie-chart':'f200','line-chart':'f201','lastfm':'f202','lastfm-square':'f203','toggle-off':'f204','toggle-on':'f205','bicycle':'f206','bus':'f207','ioxhost':'f208','angellist':'f209','cc':'f20a','shekel,sheqel,ils':'f20b','meanpath':'f20c','buysellads':'f20d','connectdevelop':'f20e','dashcube':'f210','forumbee':'f211','leanpub':'f212','sellsy':'f213','shirtsinbulk':'f214','simplybuilt':'f215','skyatlas':'f216','cart-plus':'f217','cart-arrow-down':'f218','diamond':'f219','ship':'f21a','user-secret':'f21b','motorcycle':'f21c','street-view':'f21d','heartbeat':'f21e','venus':'f221','mars':'f222','mercury':'f223','intersex,transgender':'f224','transgender-alt':'f225','venus-double':'f226','mars-double':'f227','venus-mars':'f228','mars-stroke':'f229','mars-stroke-v':'f22a','mars-stroke-h':'f22b','neuter':'f22c','genderless':'f22d','facebook-official':'f230','pinterest-p':'f231','whatsapp':'f232','server':'f233','user-plus':'f234','user-times':'f235','hotel,bed':'f236','viacoin':'f237','train':'f238','subway':'f239','medium':'f23a','yc,y-combinator':'f23b','optin-monster':'f23c','opencart':'f23d','expeditedssl':'f23e','battery-4,battery-full':'f240','battery-3,battery-three-quarters':'f241','battery-2,battery-half':'f242','battery-1,battery-quarter':'f243','battery-0,battery-empty':'f244','mouse-pointer':'f245','i-cursor':'f246','object-group':'f247','object-ungroup':'f248','sticky-note':'f249','sticky-note-o':'f24a','cc-jcb':'f24b','cc-diners-club':'f24c','clone':'f24d','balance-scale':'f24e','hourglass-o':'f250','hourglass-1,hourglass-start':'f251','hourglass-2,hourglass-half':'f252','hourglass-3,hourglass-end':'f253','hourglass':'f254','hand-grab-o,hand-rock-o':'f255','hand-stop-o,hand-paper-o':'f256','hand-scissors-o':'f257','hand-lizard-o':'f258','hand-spock-o':'f259','hand-pointer-o':'f25a','hand-peace-o':'f25b','trademark':'f25c','registered':'f25d','creative-commons':'f25e','gg':'f260','gg-circle':'f261','tripadvisor':'f262','odnoklassniki':'f263','odnoklassniki-square':'f264','get-pocket':'f265','wikipedia-w':'f266','safari':'f267','chrome':'f268','firefox':'f269','opera':'f26a','internet-explorer':'f26b','tv,television':'f26c','contao':'f26d','500px':'f26e','amazon':'f270','calendar-plus-o':'f271','calendar-minus-o':'f272','calendar-times-o':'f273','calendar-check-o':'f274','industry':'f275','map-pin':'f276','map-signs':'f277','map-o':'f278','map':'f279','commenting':'f27a','commenting-o':'f27b','houzz':'f27c','vimeo':'f27d','black-tie':'f27e','fonticons':'f280','reddit-alien':'f281','edge':'f282','credit-card-alt':'f283','codiepie':'f284','modx':'f285','fort-awesome':'f286','usb':'f287','product-hunt':'f288','mixcloud':'f289','scribd':'f28a','pause-circle':'f28b','pause-circle-o':'f28c','stop-circle':'f28d','stop-circle-o':'f28e','shopping-bag':'f290','shopping-basket':'f291','hashtag':'f292','bluetooth':'f293','bluetooth-b':'f294','percent':'f295','gitlab':'f296','wpbeginner':'f297','wpforms':'f298','envira':'f299','universal-access':'f29a','wheelchair-alt':'f29b','question-circle-o':'f29c','blind':'f29d','audio-description':'f29e','volume-control-phone':'f2a0','braille':'f2a1','assistive-listening-systems':'f2a2','asl-interpreting,american-sign-language-interpreting':'f2a3','deafness,hard-of-hearing,deaf':'f2a4','glide':'f2a5','glide-g':'f2a6','signing,sign-language':'f2a7','low-vision':'f2a8','viadeo':'f2a9','viadeo-square':'f2aa','snapchat':'f2ab','snapchat-ghost':'f2ac','snapchat-square':'f2ad','pied-piper':'f2ae','first-order':'f2b0','yoast':'f2b1','themeisle':'f2b2','google-plus-circle,google-plus-official':'f2b3','fa,font-awesome':'f2b4'};
    }*/

    function icon(d) {
        var code;
        if (options.iconMap && options.showIcons && options.icons) {
            if (options.icons[d.labels[0]] && options.iconMap[options.icons[d.labels[0]]]) {
                code = options.iconMap[options.icons[d.labels[0]]];
            } else if (options.iconMap[d.labels[0]]) { code = options.iconMap[d.labels[0]]; } 
              else if (options.icons[d.labels[0]]) { code = options.icons[d.labels[0]]; }
        }
        return code;
    }

    function image(d) {
        var i, imagesForLabel, img, imgLevel, label, labelPropertyValue, property, value;
        if (options.images) {
            imagesForLabel = options.imageMap[d.labels[0]];
            if (imagesForLabel) {
                imgLevel = 0;
                for (i = 0; i < imagesForLabel.length; i++) {
                    labelPropertyValue = imagesForLabel[i].split('|');
                    switch (labelPropertyValue.length) {
                        case 3:
                        value = labelPropertyValue[2];
                        /* falls through */
                        case 2:
                        property = labelPropertyValue[1];
                        /* falls through */
                        case 1:
                        label = labelPropertyValue[0];
                    }
                    if (d.labels[0] === label &&
                        (!property || d.properties[property] !== undefined) &&
                        (!value || d.properties[property] === value)) {
                        if (labelPropertyValue.length > imgLevel) {
                            img = options.images[imagesForLabel[i]];
                            imgLevel = labelPropertyValue.length;
                        }
                    }
                }
            }
        }
        return img;
    }

    function init(_selector, _options) {
        //initIconMap();
        merge(options, _options);
        if (options.icons) { options.showIcons = true; }
        if (!options.minCollision) { options.minCollision = options.nodeRadius * 2; }
        initImageMap();
        selector = _selector;
        container = d3.select(selector);
        container.attr('class', 'neo4jd3').html('');
        if (options.infoPanel) { info = appendInfoPanel(container); }
        appendGraph(container);
        simulation = initSimulation();
        if (options.neo4jData) { loadNeo4jData(options.neo4jData); } 
        else if (options.neo4jDataUrl) { loadNeo4jDataFromUrl(options.neo4jDataUrl); } 
        else { console.error('Error: both neo4jData and neo4jDataUrl are empty!'); }
    }

    function initIconMap() {
        Object.keys(options.iconMap).forEach(function(key, index) {
            var keys = key.split(','), value = options.iconMap[key];
            keys.forEach(function(key) { options.iconMap[key] = value; });
        });
    }

    function initImageMap() {
        var key, keys, selector;
        for (key in options.images) {
            if (options.images.hasOwnProperty(key)) {
                keys = key.split('|');
                if (!options.imageMap[keys[0]]) { options.imageMap[keys[0]] = [key]; } 
                else { options.imageMap[keys[0]].push(key); }
            }
        }
    }

    function initSimulation() {
        var simulation = d3.forceSimulation()
        					//.velocityDecay(0.8).force('x', d3.force().strength(0.002)).force('y', d3.force().strength(0.002))
                           .force('collide', d3.forceCollide().radius(function(d) { return options.minCollision;})
                           .iterations(2))
                           .force('charge', d3.forceManyBody())
                           .force('link', d3.forceLink().id(function(d) { return d.id; }))
                           .force('center', d3.forceCenter(svg.node().parentElement.parentElement.clientWidth / 2, svg.node().parentElement.parentElement.clientHeight / 2))
                           .on('tick', function() { tick(); })
                           .on('end', function() {
                               if (options.zoomFit && !justLoaded) {
                                   justLoaded = true;
                                   zoomFit(2);
                               }
                           });
        return simulation;
    }

    function loadNeo4jData() {
        nodes = [];
        relationships = [];
        updateWithNeo4jData(options.neo4jData);
    }

    function loadNeo4jDataFromUrl(neo4jDataUrl) {
        nodes = [];
        relationships = [];
        d3.json(neo4jDataUrl, function(error, data) {
            if (error) { throw error; }
            updateWithNeo4jData(data);
        });
    }

    function merge(target, source) {
        Object.keys(source).forEach(function(property) {
            target[property] = source[property];
        });
    }

    function neo4jDataToD3Data(data) {
        var graph = {
            nodes: [],
            relationships: []
        };

        data.results.forEach(function(result) {
            result.data.forEach(function(data) {
                data.graph.nodes.forEach(function(node) {
                    if (!contains(graph.nodes, node.id)) { graph.nodes.push(node); }
                });
                
                data.graph.relationships.forEach(function(relationship) {
                    relationship.source = relationship.startNode;
                    relationship.target = relationship.endNode;
                    graph.relationships.push(relationship);
                });
                
                data.graph.relationships.sort(function(a, b) {
                    if (a.source > b.source) { return 1; } 
                    else if (a.source < b.source) { return -1; } 
                    else {
                        if (a.target > b.target) { return 1; }
                        if (a.target < b.target) { return -1; } 
                        else { return 0; }
                    }
                });

                for (var i = 0; i < data.graph.relationships.length; i++) {
                    if (i !== 0 && data.graph.relationships[i].source === data.graph.relationships[i-1].source && data.graph.relationships[i].target === data.graph.relationships[i-1].target) {
                        data.graph.relationships[i].linknum = data.graph.relationships[i - 1].linknum + 1;
                    } else { data.graph.relationships[i].linknum = 1; }
                }
            });
        });
        return graph;
    }

    function randomD3Data(d, maxNodesToGenerate) {
        var data = {
                nodes: [],
                relationships: []
            },
            i, label, node, numNodes = (maxNodesToGenerate * Math.random() << 0) + 1, relationship, s = size();

        for (i = 0; i < numNodes; i++) {
            label = randomLabel();
            node = {
                id: s.nodes + 1 + i,
                labels: [label],
                properties: {
                    random: label
                },
                x: d.x,
                y: d.y
            };
            data.nodes[data.nodes.length] = node;
            relationship = {
                id: s.relationships + 1 + i,
                type: label.toUpperCase(),
                startNode: d.id,
                endNode: s.nodes + 1 + i,
                properties: {
                    from: Date.now()
                },
                source: d.id,
                target: s.nodes + 1 + i,
                linknum: s.relationships + 1 + i
            };
            data.relationships[data.relationships.length] = relationship;
        }
        return data;
    }

    function randomLabel() {
        var icons = Object.keys(options.iconMap);
        return icons[icons.length * Math.random() << 0];
    }

    function rotate(cx, cy, x, y, angle) {
        var radians = (Math.PI / 180) * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = (cos * (x - cx)) + (sin * (y - cy)) + cx,
            ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;
        return { x: nx, y: ny };
    }

    function rotatePoint(c, p, angle) {
        return rotate(c.x, c.y, p.x, p.y, angle);
    }

    function rotation(source, target) {
        return Math.atan2(target.y - source.y, target.x - source.x) * 180 / Math.PI;
    }

    function size() {
        return {
            nodes: nodes.length,
            relationships: relationships.length
        };
    }
/*
    function smoothTransform(elem, translate, scale) {
        var animationMilliseconds = 5000,
            timeoutMilliseconds = 50,
            steps = parseInt(animationMilliseconds / timeoutMilliseconds);
        setTimeout(function() {
            smoothTransformStep(elem, translate, scale, timeoutMilliseconds, 1, steps);
        }, timeoutMilliseconds);
    }
    function smoothTransformStep(elem, translate, scale, timeoutMilliseconds, step, steps) {
        var progress = step / steps;
        elem.attr('transform', 'translate(' + (translate[0] * progress) + ', ' + (translate[1] * progress) + ') scale(' + (scale * progress) + ')');
        if (step < steps) {
            setTimeout(function() {
                smoothTransformStep(elem, translate, scale, timeoutMilliseconds, step + 1, steps);
            }, timeoutMilliseconds);
        }
    }
*/
    function stickNode(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function tick() {
        tickNodes();
        tickRelationships();
    }

    function tickNodes() {
        if (node) {
            node.attr('transform', function(d) { return 'translate(' + d.x + ', ' + d.y + ')'; });
        }
    }

    function tickRelationships() {
        if (relationship) {
            relationship.attr('transform', function(d) {
                var angle = rotation(d.source, d.target);
                return 'translate(' + d.source.x + ', ' + d.source.y + ') rotate(' + angle + ')';
            });
            tickRelationshipsTexts();
            tickRelationshipsOutlines();
            tickRelationshipsOverlays();
        }
    }

    function tickRelationshipsOutlines() {
        relationship.each(function(relationship) {
            var rel = d3.select(this), outline = rel.select('.outline'),
                text = rel.select('.text'), bbox = text.node().getBBox(), padding = 3;

            outline.attr('d', function(d) {
                var center = { x: 0, y: 0 },
                    angle = rotation(d.source, d.target),
                    textBoundingBox = text.node().getBBox(),
                    textPadding = 5,
                    u = unitaryVector(d.source, d.target),
                    textMargin = { x: (d.target.x - d.source.x - (textBoundingBox.width + textPadding) * u.x) * 0.5, y: (d.target.y - d.source.y - (textBoundingBox.width + textPadding) * u.y) * 0.5 },
                    n = unitaryNormalVector(d.source, d.target),
                    rotatedPointA1 = rotatePoint(center, { x: 0 + (options.nodeRadius + 1) * u.x - n.x, y: 0 + (options.nodeRadius + 1) * u.y - n.y }, angle),
                    rotatedPointB1 = rotatePoint(center, { x: textMargin.x - n.x, y: textMargin.y - n.y }, angle),
                    rotatedPointC1 = rotatePoint(center, { x: textMargin.x, y: textMargin.y }, angle),
                    rotatedPointD1 = rotatePoint(center, { x: 0 + (options.nodeRadius + 1) * u.x, y: 0 + (options.nodeRadius + 1) * u.y }, angle),
                    rotatedPointA2 = rotatePoint(center, { x: d.target.x - d.source.x - textMargin.x - n.x, y: d.target.y - d.source.y - textMargin.y - n.y }, angle),
                    rotatedPointB2 = rotatePoint(center, { x: d.target.x - d.source.x - (options.nodeRadius + 1) * u.x - n.x - u.x * options.arrowSize, y: d.target.y - d.source.y - (options.nodeRadius + 1) * u.y - n.y - u.y * options.arrowSize }, angle),
                    rotatedPointC2 = rotatePoint(center, { x: d.target.x - d.source.x - (options.nodeRadius + 1) * u.x - n.x + (n.x - u.x) * options.arrowSize, y: d.target.y - d.source.y - (options.nodeRadius + 1) * u.y - n.y + (n.y - u.y) * options.arrowSize }, angle),
                    rotatedPointD2 = rotatePoint(center, { x: d.target.x - d.source.x - (options.nodeRadius + 1) * u.x, y: d.target.y - d.source.y - (options.nodeRadius + 1) * u.y }, angle),
                    rotatedPointE2 = rotatePoint(center, { x: d.target.x - d.source.x - (options.nodeRadius + 1) * u.x + (- n.x - u.x) * options.arrowSize, y: d.target.y - d.source.y - (options.nodeRadius + 1) * u.y + (- n.y - u.y) * options.arrowSize }, angle),
                    rotatedPointF2 = rotatePoint(center, { x: d.target.x - d.source.x - (options.nodeRadius + 1) * u.x - u.x * options.arrowSize, y: d.target.y - d.source.y - (options.nodeRadius + 1) * u.y - u.y * options.arrowSize }, angle),
                    rotatedPointG2 = rotatePoint(center, { x: d.target.x - d.source.x - textMargin.x, y: d.target.y - d.source.y - textMargin.y }, angle);

                return 'M ' + rotatedPointA1.x + ' ' + rotatedPointA1.y +
                       ' L ' + rotatedPointB1.x + ' ' + rotatedPointB1.y +
                       ' L ' + rotatedPointC1.x + ' ' + rotatedPointC1.y +
                       ' L ' + rotatedPointD1.x + ' ' + rotatedPointD1.y +
                       ' Z M ' + rotatedPointA2.x + ' ' + rotatedPointA2.y +
                       ' L ' + rotatedPointB2.x + ' ' + rotatedPointB2.y +
                       ' L ' + rotatedPointC2.x + ' ' + rotatedPointC2.y +
                       ' L ' + rotatedPointD2.x + ' ' + rotatedPointD2.y +
                       ' L ' + rotatedPointE2.x + ' ' + rotatedPointE2.y +
                       ' L ' + rotatedPointF2.x + ' ' + rotatedPointF2.y +
                       ' L ' + rotatedPointG2.x + ' ' + rotatedPointG2.y +
                       ' Z';
            });
        });
    }

    function tickRelationshipsOverlays() {
        relationshipOverlay.attr('d', function(d) {
            var center = { x: 0, y: 0 },
                angle = rotation(d.source, d.target),
                n1 = unitaryNormalVector(d.source, d.target),
                n = unitaryNormalVector(d.source, d.target, 50),
                rotatedPointA = rotatePoint(center, { x: 0 - n.x, y: 0 - n.y }, angle),
                rotatedPointB = rotatePoint(center, { x: d.target.x - d.source.x - n.x, y: d.target.y - d.source.y - n.y }, angle),
                rotatedPointC = rotatePoint(center, { x: d.target.x - d.source.x + n.x - n1.x, y: d.target.y - d.source.y + n.y - n1.y }, angle),
                rotatedPointD = rotatePoint(center, { x: 0 + n.x - n1.x, y: 0 + n.y - n1.y }, angle);

            return 'M ' + rotatedPointA.x + ' ' + rotatedPointA.y +
                   ' L ' + rotatedPointB.x + ' ' + rotatedPointB.y +
                   ' L ' + rotatedPointC.x + ' ' + rotatedPointC.y +
                   ' L ' + rotatedPointD.x + ' ' + rotatedPointD.y +
                   ' Z';
        });
    }

    function tickRelationshipsTexts() {
        relationshipText.attr('transform', function(d) {
            var angle = (rotation(d.source, d.target) + 360) % 360,
                mirror = angle > 90 && angle < 270,
                center = { x: 0, y: 0 },
                n = unitaryNormalVector(d.source, d.target),
                nWeight = mirror ? 2 : -3,
                point = { x: (d.target.x - d.source.x) * 0.5 + n.x * nWeight, y: (d.target.y - d.source.y) * 0.5 + n.y * nWeight },
                rotatedPoint = rotatePoint(center, point, angle);

            return 'translate(' + rotatedPoint.x + ', ' + rotatedPoint.y + ') rotate(' + (mirror ? 180 : 0) + ')';
        });
    }

    function toString(d) {
        var s = d.labels ? d.labels[0] : d.type;
        /*s += ' (<id>: ' + d.id; Object.keys(d.properties).forEach(function(property) { s += '' + property + ': ' + JSON.stringify(d.properties[property]); });*/
        s += ' ( ';
        if(d.properties.crmContactId == null) {
            s += '' + d.properties.displayText;
        }
        else {
            s += ' Name : ' + d.properties.displayText;
            s += ', crmContactId : ' + d.properties.crmContactId;
        }
        s += ')';
        return s;
    }

    function unitaryNormalVector(source, target, newLength) {
        var center = { x: 0, y: 0 }, vector = unitaryVector(source, target, newLength);
        return rotatePoint(center, vector, 90);
    }

    function unitaryVector(source, target, newLength) {
        var length = Math.sqrt(Math.pow(target.x - source.x, 2) + Math.pow(target.y - source.y, 2)) / Math.sqrt(newLength || 1);
        return {
            x: (target.x - source.x) / length,
            y: (target.y - source.y) / length,
        };
    }

    function updateWithD3Data(d3Data) {
        updateNodesAndRelationships(d3Data.nodes, d3Data.relationships);
    }

    function updateWithNeo4jData(neo4jData) {
        var d3Data = neo4jDataToD3Data(neo4jData);
        updateWithD3Data(d3Data);
    }

    function updateInfo(d) {
        clearInfo();
        if (d.labels) { appendInfoElementClass('class', d.labels[0]); } 
        else { appendInfoElementRelationship('class', d.type); }
        //To not show id on UI in INFO Panel hiding this
        //appendInfoElementProperty('property', '&lt;id&gt;', d.id);
        Object.keys(d.properties).forEach(function(property) {
        	//remove for not adding double quote again 'JSON.stringify(d.properties[property])'
            appendInfoElementProperty('property', property, d.properties[property]);
        });
    }

    function updateNodes(n) {
        Array.prototype.push.apply(nodes, n);
        node = svgNodes.selectAll('.node').data(nodes, function(d) { return d.id; });
        var nodeEnter = appendNodeToGraph();
        node = nodeEnter.merge(node);
    }

    function updateNodesAndRelationships(n, r) {
        updateRelationships(r);
        updateNodes(n);
        simulation.nodes(nodes);
        simulation.force('link').links(relationships);
    }

    function updateRelationships(r) {
        Array.prototype.push.apply(relationships, r);
        relationship = svgRelationships.selectAll('.relationship').data(relationships, function(d) { return d.id; });
        var relationshipEnter = appendRelationshipToGraph();
        relationship = relationshipEnter.relationship.merge(relationship);
        relationshipOutline = svg.selectAll('.relationship .outline');
        relationshipOutline = relationshipEnter.outline.merge(relationshipOutline);
        relationshipOverlay = svg.selectAll('.relationship .overlay');
        relationshipOverlay = relationshipEnter.overlay.merge(relationshipOverlay);
        relationshipText = svg.selectAll('.relationship .text');
        relationshipText = relationshipEnter.text.merge(relationshipText);
    }

    function version() {
        return VERSION;
    }

    function zoomFit(transitionDuration) {
        var bounds = svg.node().getBBox(),
            parent = svg.node().parentElement.parentElement,
            fullWidth = parent.clientWidth, fullHeight = parent.clientHeight,
            width = bounds.width, height = bounds.height, midX = bounds.x + width / 2, midY = bounds.y + height / 2;

        if (width === 0 || height === 0) { return; /* nothing to fit */ }
        svgScale = 0.85 / Math.max(width / fullWidth, height / fullHeight);
        svgTranslate = [fullWidth / 2 - svgScale * midX, fullHeight / 2 - svgScale * midY];
        svg.attr('transform', 'translate(' + svgTranslate[0] + ', ' + svgTranslate[1] + ') scale(' + svgScale + ')');
//        smoothTransform(svgTranslate, svgScale);
    }
    
    init(_selector, _options);
    return {
        appendRandomDataToNode: appendRandomDataToNode,
        neo4jDataToD3Data: neo4jDataToD3Data,
        randomD3Data: randomD3Data,
        size: size,
        updateWithD3Data: updateWithD3Data,
        updateWithNeo4jData: updateWithNeo4jData,
        version: version
    };
}
module.exports = Neo4jD3;
},{}]},{},[1])(1)
});